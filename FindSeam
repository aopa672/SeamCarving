% FindSeam
% Finds the minimum energy path through adjacent pixels from the top to the
% bottom with 1 pixel per row selected
% Author: Asel Opata
% Input : EnergyArray - m x n 2D array showing energy values for each pixel
%                       of original image
% Output :       seam - 1D row array of length m, representing column
%                       coordinates, of seam pixels in each row
%                       describing the path of a minimum energy vertical
%                       from row 1 to row m

function[seam] = FindSeam(EnergyArray)
% FIRST create the energy paths to every single pixel of the image starting
% at the second row and store in seam array

% Find dimensions
[rows, cols] = size(EnergyArray);

% Call the column numbers for each pixel of the first row firstRowPaths
firstRowPaths = 1:cols;

% Store these in minpathRow1 to represent the minimum paths to get to
% pixels in first row of image for use as an input to Function 4
minPathRow1 = num2cell(firstRowPaths);

% Store first row energies in EnergiesRow1 to use as input to Function 4
EnergiesRow1 = EnergyArray(1,:,:);

% These inputs can now be used to to calculate the minimum energies to
% reach every pixels in the second row and, the pathway to reach them
%  individual outputs are then stored in minEnergiesRow
%  and minpath

% Preallocate arrays for performance
minEnergiesRow = zeros(1,cols);

% Loop through each pixel in the second row
for j = 1:cols;
    pixelEnergy = EnergyArray(2,j);
    [minEnergy,seam] = FindLeastEnergyPathToPixel(j, pixelEnergy, EnergiesRow1, minPathRow1);
    minEnergiesRow(j) = minEnergy;
    minPath{j} = seam;
end

% Temp arrays are used to store the paths and energies in a large array
tempcellarray = minPath;
tempEnergies = minEnergiesRow;

% Now using the information from the first row we can continue to overwrite
% and store energy and path information for the remaining rows
for i = 3:rows
    % Initial row energies and paths are overwritten after every cycle of k
    minEnergiesRow = tempEnergies;
    minPath = tempcellarray;
    for k = 1:cols
        pixelEnergy = EnergyArray(i,k);
        [minEnergy,seam] = FindLeastEnergyPathToPixel(k, pixelEnergy, minEnergiesRow, minPath);
        % Store in output in temp arrays
        tempEnergies(k) = minEnergy;
        tempcellarray(k) = {seam};
    end
end
% Use min function with final tempEnergies array to pick the column with
% the lowest energy pathway
[~,position] = min(tempEnergies);
% Use position to choose the corresponding seam
seam = tempcellarray{position};
end

